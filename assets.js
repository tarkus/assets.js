// Generated by CoffeeScript 1.6.3
(function() {
  var Assets, extend;

  Assets = (function() {
    function Assets() {}

    Assets.storagePrefix = "assets-";

    Assets.defaultExpiration = 5000;

    Assets.get = function(url, options, cb) {
      var cached, e, item, obj, xhr;
      obj = {
        url: url,
        key: options.key != null ? options.key : url.split("/").pop().split("?")[0]
      };
      try {
        item = localStorage.getItem(Assets.storagePrefix + obj.key);
        if (!item) {
          throw new Error("Invalid item");
        }
        cached = JSON.parse(item || 'false');
        if (obj.url === cached.url) {
          return cb(cached);
        } else {
          if (!item) {
            throw new Error("New item");
          }
        }
      } catch (_error) {
        e = _error;
        xhr = new XMLHttpRequest();
        xhr.open('GET', url);
        xhr.onreadystatechange = function() {
          var now;
          if (xhr.readyState === 4) {
            if (xhr.status !== 200) {
              return new Error(xhr.statusText);
            }
            now = +new Date();
            obj.data = xhr.responseText;
            obj.stamp = now;
            obj.expire = now + (options.expire || Assets.defaultExpiration) * 60 * 60 * 1000;
            return Assets.save(obj, cb);
          }
        };
        return xhr.send();
      }
    };

    Assets.save = function(obj, cb) {
      var e, item, tempScripts, _i, _len;
      if (cb == null) {
        cb = null;
      }
      try {
        localStorage.setItem(Assets.storagePrefix + obj.key, JSON.stringify(obj));
        return typeof cb === "function" ? cb(obj) : void 0;
      } catch (_error) {
        e = _error;
        if (e.name.toUpperCase().indexOf('QUOTA') < 0) {
          return typeof cb === "function" ? cb(obj) : void 0;
        }
        tempScripts = [];
        for (_i = 0, _len = localStorage.length; _i < _len; _i++) {
          item = localStorage[_i];
          if (item.indexOf(Assets.storagePrefix) === 0) {
            tempScripts.push(JSON.parse(localStorage[item]));
          }
        }
        if (tempScripts.length < 1) {
          return false;
        }
        tempScripts.sort(function(a, b) {
          return a.stamp - b.stamp;
        });
        Assets.remove(tempScripts[0].key);
        return Assets.save(obj, cb);
      }
    };

    Assets.javascript = function(url, options) {
      var head, script, single, _i, _len;
      if (options == null) {
        options = {};
      }
      if (Object.prototype.toString.call(url) === '[object Array]') {
        for (_i = 0, _len = url.length; _i < _len; _i++) {
          single = url[_i];
          Assets.javascript(single, options);
        }
        return;
      }
      if (url.slice(0, 6) === "<script") {
        url = url.match(/src="[^"]+"/);
      }
      head = document.head || document.getElementsByTagName('head')[0];
      script = document.createElement('script');
      script.typel = "text/javascript";
      script.defer = true;
      return Assets.get(url, options, function(obj) {
        script.text = obj.data;
        script.setAttribute('id', "assets-" + (obj.key.replace(".", "_")));
        return head.appendChild(script);
      });
    };

    Assets.css = function(url, options) {
      var css, head;
      if (options == null) {
        options = {};
      }
      head = document.head || document.getElementsByTagName('head')[0];
      css = document.createElement('style');
      css.type = 'text/css';
      return Assets.get(url, options, function(obj) {
        if (css.styleSheet) {
          css.styleSheet.cssText = obj.data;
        } else {
          css.appendChild(document.createTextNode(obj.data));
        }
        css.setAttribute('id', "assets-" + (obj.key.replace(".", "_")));
        return head.appendChild(css);
      });
    };

    Assets.remove = function(key) {
      if (typeof localStorage === "undefined" || localStorage === null) {
        return Assets;
      }
      localStorage.removeItem(Assets.storagePrefix + key);
      return Assets;
    };

    Assets.clear = function(expired) {
      var item, key, now, _i, _len;
      if (typeof localStorage === "undefined" || localStorage === null) {
        return Assets;
      }
      now = +new Date();
      for (_i = 0, _len = localStorage.length; _i < _len; _i++) {
        item = localStorage[_i];
        key = item.split(storagePrefix)[1];
        if (key && !expired || Assets.get(key).expire <= now) {
          Assets.remove(key);
        }
      }
      return Assets;
    };

    return Assets;

  }).call(this);

  extend = function(object, properties) {
    var key, val;
    for (key in properties) {
      val = properties[key];
      object[key] = val;
    }
    return object;
  };

  window.Assets = Assets;

}).call(this);
